--- a/components/dao-agent/src/lib.rs
+++ b/components/dao-agent/src/lib.rs
@@ -15,7 +15,7 @@ use bindings::{
 use context::DaoContext;
 use sol_interfaces::{Operation, Transaction};
 use std::str::FromStr;
-use wavs_llm::client::{LlmResponse, Message};
+use wavs_llm::{LlmResponse, Message};
 use wavs_llm::{client, errors::AgentError};
 
 struct Component;
@@ -52,15 +52,10 @@ impl Guest for Component {
                 system_msg.content = Some(new_content);
             }
         } else {
             // If no system message exists, create one with the DAO state
-            llm_context.messages.push(Message {
-                role: "system".into(),
-                content: Some(dao_state),
-                tool_calls: None,
-                tool_call_id: None,
-                name: None,
-            });
+            llm_context.messages.push(Message::system(dao_state));
         }
 
         // Create LLM client implementation using the standalone constructor
         let llm_client = client::LLMClient::with_config(
             llm_context.model.clone(),
@@ -68,11 +63,29 @@ impl Guest for Component {
         );
 
         // Use the helper function to process the prompt with config
-        let result = llm_client
-            .process_with_config(prompt.clone(), &llm_context)
-            .map_err(|e| e.to_string())?;
+        let result = {
+            // First try to get the response with potential tool calls
+            let response = llm_client
+                .chat(prompt.clone())
+                .with_config(&llm_context)
+                .send()
+                .map_err(|e| e.to_string())?;
+            
+            // Check if there's content to parse
+            if let Some(content) = response.content {
+                // Try to parse as transaction first
+                if let Ok(tx) = serde_json::from_str::<wavs_llm::contracts::Transaction>(&content) {
+                    LlmResponse::Transaction(tx)
+                } else {
+                    // Otherwise return as text
+                    LlmResponse::Text(content)
+                }
+            } else {
+                // No content, return empty text
+                LlmResponse::Text(String::new())
+            }
+        };
 
         // Handle the response
         match result {
             LlmResponse::Transaction(tx) => {
                 println!("Transaction to execute: {:?}", tx);