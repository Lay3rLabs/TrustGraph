diff --git a/dist/types/hook.d.ts b/dist/types/hook.d.ts
index 818b7de530416d307f6351bafb2310a776c863bc..485af68c8c2b40f05fc4eeda78c5e56fd36e62be 100644
--- a/dist/types/hook.d.ts
+++ b/dist/types/hook.d.ts
@@ -1,9 +1,9 @@
 import type { Client, Status } from "@ponder/client";
-import { type QueryKey, type UseQueryOptions, type UseQueryResult } from "@tanstack/react-query";
+import { type DefaultError, type QueryKey, type UseQueryOptions, type UseQueryResult } from "@tanstack/react-query";
 import type { ResolvedSchema } from "./index.js";
-export declare function usePonderQuery<result>(params: {
-    queryFn: (db: Client<ResolvedSchema>["db"]) => Promise<result>;
-} & Omit<UseQueryOptions<result>, "queryFn" | "queryKey">): UseQueryResult<result>;
+export declare function usePonderQuery<queryResult, error = DefaultError, result = queryResult>(params: {
+    queryFn: (db: Client<ResolvedSchema>["db"]) => Promise<queryResult>;
+} & Omit<UseQueryOptions<queryResult, error, result>, "queryFn" | "queryKey">): UseQueryResult<result, error>;
 export declare function usePonderClient(): Client<ResolvedSchema>;
 export declare function usePonderQueryOptions<T>(queryFn: (db: Client<ResolvedSchema>["db"]) => T): {
     queryKey: QueryKey;
diff --git a/src/hook.ts b/src/hook.ts
index 83783004712e70617d8e1337c2e1e0456f1d348d..1546fa40b2fdba121f0925d76a55952f762a46a5 100644
--- a/src/hook.ts
+++ b/src/hook.ts
@@ -2,6 +2,7 @@
 
 import type { Client, Status } from "@ponder/client";
 import {
+  type DefaultError,
   type QueryKey,
   type UseQueryOptions,
   type UseQueryResult,
@@ -13,11 +14,15 @@ import { PonderContext } from "./context.js";
 import type { ResolvedSchema } from "./index.js";
 import { getPonderQueryOptions } from "./utils.js";
 
-export function usePonderQuery<result>(
+export function usePonderQuery<
+  queryResult = unknown,
+  error = DefaultError,
+  result = queryResult,
+>(
   params: {
-    queryFn: (db: Client<ResolvedSchema>["db"]) => Promise<result>;
-  } & Omit<UseQueryOptions<result>, "queryFn" | "queryKey">,
-): UseQueryResult<result> {
+    queryFn: (db: Client<ResolvedSchema>["db"]) => Promise<queryResult>;
+  } & Omit<UseQueryOptions<queryResult, error, result>, "queryFn" | "queryKey">,
+): UseQueryResult<result, error> {
   const queryClient = useQueryClient();
 
   const client = usePonderClient();
