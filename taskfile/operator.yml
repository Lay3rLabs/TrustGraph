version: "3"

silent: true

vars:
  RPC_URL: '{{.RPC_URL | default "http://localhost:8545"}}'
  OPERATOR_NUM: '{{.OPERATOR_NUM}}'
  OPERATOR_WEIGHT: '{{.OPERATOR_WEIGHT | default "1"}}'
  WAVS_ENV_FILE: 'infra/wavs-{{.OPERATOR_NUM}}/.env'

  # Common shell script snippets
  VALIDATE_INPUTS: |
    if [ -z "{{.OPERATOR_NUM}}" ]; then
      echo "‚ùå Error: OPERATOR_NUM is required"
      echo "Usage: task operator:<command> OPERATOR_NUM=1"
      exit 1
    fi
    if [ ! -f "{{.WAVS_ENV_FILE}}" ]; then
      echo "‚ùå Error: Environment file {{.WAVS_ENV_FILE}} not found"
      exit 1
    fi
    echo "üìù Loading operator {{.OPERATOR_NUM}} configuration from {{.WAVS_ENV_FILE}}"

  LOAD_ENV_AND_KEYS: |
    source {{.WAVS_ENV_FILE}}
    OPERATOR_KEY=$(cast wallet private-key --mnemonic "$WAVS_SUBMISSION_MNEMONIC" --mnemonic-index 0)
    OPERATOR_ADDRESS=$(cast wallet address ${OPERATOR_KEY})
    WAVS_SIGNING_KEY=$(cast wallet address --mnemonic "$WAVS_SUBMISSION_MNEMONIC" --mnemonic-index 1)

tasks:
  whitelist:
    desc: "Whitelist an operator with WAVS Service Manager"
    cmds:
      - |
        {{.VALIDATE_INPUTS}}
        {{.LOAD_ENV_AND_KEYS}}

        echo "üîë Operator Address: ${OPERATOR_ADDRESS}"

        # Fund operator if on local network
        if [[ "{{.RPC_URL}}" == *"localhost"* ]] || [[ "{{.RPC_URL}}" == *"127.0.0.1"* ]]; then
          echo "üí∞ Funding operator on local network..."
          cast rpc anvil_setBalance ${OPERATOR_ADDRESS} $(cast to-hex 100000000000000000) --rpc-url {{.RPC_URL}}
        fi

        echo "üìù Whitelisting operator in WAVS Service Manager..."
        cast send {{.WAVS_SERVICE_MANAGER_ADDRESS}} "whitelistOperator(address,uint256)" ${OPERATOR_ADDRESS} {{.OPERATOR_WEIGHT}} \
          --private-key ${PRIVATE_KEY} \
          --rpc-url {{.RPC_URL}}

        echo "‚öñÔ∏è Checking operator weight..."
        cast call {{.WAVS_SERVICE_MANAGER_ADDRESS}} "getOperatorWeight(address)" ${OPERATOR_ADDRESS} \
          --rpc-url {{.RPC_URL}}

        echo "‚úÖ Whitelisting complete!"

  register:
    desc: "Register an operator with WAVS Service Manager"
    cmds:
      - |
        {{.VALIDATE_INPUTS}}
        {{.LOAD_ENV_AND_KEYS}}

        echo "üîë Operator Address: ${OPERATOR_ADDRESS}"
        echo "üîë Signing Key: ${WAVS_SIGNING_KEY}"

        echo "üîê Setting signing key..."
        cast send {{.WAVS_SERVICE_MANAGER_ADDRESS}} "setSigningKey(address)" ${WAVS_SIGNING_KEY} \
          --private-key ${OPERATOR_KEY} \
          --rpc-url {{.RPC_URL}}

        echo "‚úÖ Registration complete!"

  verify:
    desc: "Verify operator registration status"
    cmds:
      - |
        {{.VALIDATE_INPUTS}}
        {{.LOAD_ENV_AND_KEYS}}

        echo "üîç Verifying operator {{.OPERATOR_NUM}} registration..."

        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "Operator Address: ${OPERATOR_ADDRESS}"

        echo -n "Operator Signing Key: "
        cast call {{.WAVS_SERVICE_MANAGER_ADDRESS}} "getLatestSigningKeyForOperator(address)" ${OPERATOR_ADDRESS} \
          --rpc-url {{.RPC_URL}}

        echo -n "Signing Key -> Operator: "
        cast call {{.WAVS_SERVICE_MANAGER_ADDRESS}} "getLatestOperatorForSigningKey(address)" ${WAVS_SIGNING_KEY} \
          --rpc-url {{.RPC_URL}}

        echo -n "Operator Weight: "
        cast call {{.WAVS_SERVICE_MANAGER_ADDRESS}} "getOperatorWeight(address)" ${OPERATOR_ADDRESS} \
          --rpc-url {{.RPC_URL}}
